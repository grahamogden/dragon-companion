(function ($) {
    class TagMention {
        constructor (ed, options) {
            this.editor = ed;
            if (typeof options.source === 'undefined') {
                return 'Please specify a source';
            }
            this.options = $.extend({}, {
                source: [],
                delay: 500,
                queryBy: 'name'
            }, options);
            this.options.insertFrom = this.options.insertFrom || this.options.queryBy;

            this.query = '';
            this.hasFocus = true;

            this.renderInput();
            this.bindEvents();
        }

        renderInput () {
            var rawHtml = '<span id="autocomplete">' +
                    '<span id="autocomplete-delimiter">' + this.options.delimiter + '</span>' +
                    '<span id="autocomplete-searchtext"><span class="dummy">\uFEFF</span></span>' +
                '</span>';

            this.editor.execCommand('mceInsertRawHTML', false, rawHtml);
            this.editor.focus();
            this.editor.selection.select(this.editor.selection.dom.select('span#autocomplete-searchtext span')[0]);
            this.editor.selection.collapse(0);
        }

        bindEvents () {
            this.editor.on('keyup', this.editorKeyUpProxy = $.proxy(this.rteKeyUp, this));
            this.editor.on('keydown', this.editorKeyDownProxy = $.proxy(this.rteKeyDown, this), true);
            this.editor.on('click', this.editorClickProxy = $.proxy(this.rteClicked, this));

            $('body').on('click', this.bodyClickProxy = $.proxy(this.rteLostFocus, this));

            $(this.editor.getWin()).on('scroll', this.rteScroll = $.proxy(function () { this.cleanUp(true); }, this));
        }

        unbindEvents () {
            this.editor.off('keyup', this.editorKeyUpProxy);
            this.editor.off('keydown', this.editorKeyDownProxy);
            this.editor.off('click', this.editorClickProxy);

            $('body').off('click', this.bodyClickProxy);

            $(this.editor.getWin()).off('scroll', this.rteScroll);
        }

        rteKeyUp (e) {
            switch (e.which || e.keyCode) {
                case 40: // Down arrow
                case 38: // Up arrow
                case 16: // Shift
                case 17: // CTRL
                case 18: // Alt
                    break;
                case 8: // Backspace
                    if (this.query === '') {
                        this.cleanUp(true);
                    } else {
                        this.lookup();
                    }
                    break;
                case 9: // Tab
                case 13: // Enter
                    var item = (this.$dropdown !== undefined) ? this.$dropdown.find('li.active') : [];
                    if (item.length) {
                        this.select(item.data('tagMention'));
                        this.cleanUp(false);
                    } else {
                        this.cleanUp(true);
                    }
                    break;
                case 27: //ESC
                    this.cleanUp(true);
                    break;
                default:
                    this.lookup();
            }
        }

        rteKeyDown (e) {
            switch (e.which || e.keyCode) {
                case 38: // Up arrow
                    e.preventDefault();
                    if (this.$dropdown !== undefined) {
                        this.highlightPreviousResult();
                    }
                    break;
                case 40: // Down arrow
                    e.preventDefault();
                    if (this.$dropdown !== undefined) {
                        this.highlightNextResult();
                    }
                    break;
                case 9: // Tab
                case 13: // Enter
                case 27: // ESC
                    e.preventDefault();
                    break;
            }

            e.stopPropagation();
        }

        rteClicked (e) {
            var $target = $(e.target);

            if (this.hasFocus && $target.parent().attr('id') !== 'autocomplete-searchtext') {
                this.cleanUp(true);
            }
        }

        rteLostFocus () {
            if (this.hasFocus) {
                this.cleanUp(true);
            }
        }

        lookup () {
            this.query = $.trim($(this.editor.getBody()).find('#autocomplete-searchtext').text()).replace('\ufeff', '');

            if (this.query.length < 3) {
                return;
            }

            if (this.$dropdown === undefined) {
                this.show();
            }

            let _this = this;

            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout($.proxy(function () {
                // Added delimiter parameter as last argument for backwards compatibility.
                // var items = [{name: 'Graham', value: 1}, {name: 'Percy', value: 2}];

                $.get(
                    this.options.source,
                    {
                        search: this.query
                    },
                    function(data) {
                        // let items = [];
                        // // let parsedData = JSON.parse(data);
                        // $.each(data, function (key, value) {
                        //     items.push(value);
                        // });
                        // //$.isFunction(this.options.source) ? this.options.source(this.query, $.proxy(this.process, this), this.options.delimiter) : this.options.source;
                        // console.log(items);
                        // console.log(items[0].name);
                        // console.log(items[0].name !== 'No results found');
                        // if (items[0].name !== 'No results found') {
                        //     this.process(items);
                        // }
                        if (data.length > 0) {
                            console.log(data);
                            _this.process(data);
                        }
                    }
                )
                    .fail(function() {
                        return;
                    });
            }, this), this.options.delay);
        }

        sorter (items) {
            var beginswith = [],
                caseSensitive = [],
                caseInsensitive = [],
                item;

            while ((item = items.shift()) !== undefined) {
                if (!item[this.options.queryBy].toLowerCase().indexOf(this.query.toLowerCase())) {
                    beginswith.push(item);
                } else if (~item[this.options.queryBy].indexOf(this.query)) {
                    caseSensitive.push(item);
                } else {
                    caseInsensitive.push(item);
                }
            }

            return beginswith.concat(caseSensitive, caseInsensitive);
        }

        highlighter (text) {
            return text.replace(new RegExp('(' + this.query.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1') + ')', 'ig'), function ($1, match) {
                return '<strong>' + match + '</strong>';
            });
        }

        show () {
            var offset = this.editor.inline ? this.offsetInline() : this.offset();

            this.$dropdown = $(this.renderDropdown())
                .css({'top': offset.top, 'left': offset.left});

            $('body').append(this.$dropdown);

            this.$dropdown.on('click', $.proxy(this.onClick, this));
        }

        process (items) {
            if (!this.hasFocus) {
                return;
            }

            let result = [];
            let _this = this;
            $.each(items, function (i, item) {
                console.log(item);
                var $element = $(_this.render(item.value, item.label, item.type));

                result.push($element[0].outerHTML);
            });

            if (result.length) {
                this.$dropdown.html(result.join('')).show();
            } else {
                this.$dropdown.hide();
                this.$dropdown.find('li').removeClass('active');
            }
        }

        renderDropdown () {
            return '<ul class="ui-autocomplete dropdown-menu"><li class="loading"></li></ul>';
        }

        render (value, name, type) {
            console.log(value);
            console.log(name);
            console.log(type);
            return '<li data-tag-mention="' + type + ':' + value + ':' + name + '">' +
                    '<a href="javascript:;">' + name + '</a>' +
                '</li>';
        }

        onClick (e) {
            var item = $(e.target).closest('li').data('tagMention');
            if (!$.isEmptyObject(item)) {
                this.select(item);
                this.cleanUp(false);
            }
            e.stopPropagation();
            e.preventDefault();
        }

        highlightPreviousResult () {
            var currentIndex = this.$dropdown.find('li.active').index(),
                index = (currentIndex === 0) ? this.$dropdown.find('li').length - 1 : --currentIndex;

            this.$dropdown.find('li').removeClass('active').eq(index).addClass('active');
        }

        highlightNextResult () {
            var currentIndex = this.$dropdown.find('li.active').index(),
                index = (currentIndex === this.$dropdown.find('li').length - 1) ? 0 : ++currentIndex;

            this.$dropdown.find('li').removeClass('active').eq(index).addClass('active');
        }

        select (item) {
            this.editor.focus();
            var selection = this.editor.dom.select('span#autocomplete')[0];
            this.editor.dom.remove(selection);
            this.editor.execCommand('mceInsertContent', false, this.insertItem(item));
        }

        insertItem (item) {
            return '<span class="tag-mention" data-tag-mention="' + item + '" contenteditable="false">' + item + '</span>';
        }

        cleanUp (rollback) {
            this.unbindEvents();
            this.hasFocus = false;

            if (this.$dropdown !== undefined) {
                this.$dropdown.remove();
                delete this.$dropdown;
            }

            if (rollback) {
                let text = this.query;
                let $selection = $(this.editor.dom.select('span#autocomplete'));

                if (!$selection.length) {
                    return;
                }

                var replacement = $('<p>' + this.options.delimiter + text + '</p>')[0].firstChild,
                    focus = $(this.editor.selection.getNode()).offset().top === ($selection.offset().top + (($selection.outerHeight() - $selection.height()) / 2));

                this.editor.dom.replace(replacement, $selection[0]);

                if (focus) {
                    this.editor.selection.select(replacement);
                    this.editor.selection.collapse();
                }
            }
        }

        offset () {
            let rtePosition = $(this.editor.getContainer()).offset();
            let contentAreaPosition = $(this.editor.getContentAreaContainer()).position();
            let nodePosition = $(this.editor.dom.select('span#autocomplete')).position();

            return {
                top: rtePosition.top + contentAreaPosition.top + nodePosition.top + $(this.editor.selection.getNode()).innerHeight() - $(this.editor.getDoc()).scrollTop() + 5,
                left: rtePosition.left + contentAreaPosition.left + nodePosition.left
            };
        }

        offsetInline () {
            let nodePosition = $(this.editor.dom.select('span#autocomplete')).offset();

            return {
                top: nodePosition.top + $(this.editor.selection.getNode()).innerHeight() + 5,
                left: nodePosition.left
            };
        }
    };

    tinymce.PluginManager.add('tagmentions', function (editor, url) {
        let tagMention;
        let config = editor.getParam('tag_mentions_config');
        config.delimiter = '@';

        // let prevCharIsSpace = function () {
        //     var start = editor.selection.getRng(true).startOffset,
        //           text = editor.selection.getRng(true).startContainer.data || '',
        //           charachter = text.substr(start > 0 ? start - 1 : 0, 1);
        //
        //     return (!!$.trim(charachter).length) ? false : true;
        // }

        editor.on('keypress', function (e) {
            var delimiterIndex = $.inArray(String.fromCharCode(e.which || e.keyCode), config.delimiter);
            if (delimiterIndex > -1/* && prevCharIsSpace()*/) {
                if (tagMention === undefined || (tagMention.hasFocus !== undefined && !tagMention.hasFocus)) {
                    e.preventDefault();
                    // Clone options object and set the used delimiter.
                    tagMention = new TagMention(editor, $.extend({}, config, { delimiter: config.delimiter[delimiterIndex] }));
                }
            }
        });

        return {
            longname: 'tagmentions',
        };
    });
})(jQuery);
